# SPDX-FileCopyrightText: 2022-2024 Slavi Pantaleev
# SPDX-FileCopyrightText: 2023 Igor Goldenberg
# SPDX-FileCopyrightText: 2023 Julian-Samuel GebÃ¼hr
# SPDX-FileCopyrightText: 2024 Nikita Chernyi
# SPDX-FileCopyrightText: 2024 nevart
#
# SPDX-License-Identifier: AGPL-3.0-or-later

---

# Project source code URL: https://github.com/prodrigestivill/docker-postgres-backup-local

postgres_backup_enabled: true

# postgres_backup_identifier controls the identifer of this Postgres backup instance, which influences:
# - the default storage path
# - the names of systemd services
postgres_backup_identifier: 'postgres-backup'

postgres_backup_base_path: "/{{ postgres_backup_identifier }}"
postgres_backup_config_path: "{{ postgres_backup_base_path }}/config"
postgres_backup_data_path: "{{ postgres_backup_base_path }}/data"

postgres_backup_uid: ~
postgres_backup_gid: ~

postgres_backup_connection_hostname: ''
postgres_backup_connection_port: 5432
postgres_backup_connection_username: ''
postgres_backup_connection_password: ''

postgres_backup_extra_opts: "-Z9 --schema=public --blobs"
postgres_backup_schedule: "@daily"
postgres_backup_keep_days: 7
postgres_backup_keep_weeks: 4
postgres_backup_keep_mins: 1440
postgres_backup_keep_months: 12
postgres_backup_healthcheck_port: "8080"
postgres_backup_timezone: 'UTC'

# postgres_backup_databases contains a list of database names to back up
# DO NOT set this variable directly, instead use postgres_backup_databases_auto or postgres_backup_databases_custom
postgres_backup_databases: "{{ postgres_backup_databases_auto + postgres_backup_databases_custom }}"

# The variable postgres_backup_databases_auto can be used by playbooks to automatically set the databases to back up
# E.g. the mash-playbook automatically sets up postgres databases for services that need them.
# It therefore makes sense to automatically add them to this variable.
postgres_backup_databases_auto: []

# postgres_backup_databases_custom is there if you want to manually add databases to the backup
# e.g. because their setup is not controlled by ansible
postgres_backup_databases_custom: []

# Specifies where the Postgres data is.
#
# We only use this to:
# - autodetect the Postgres version during playbook runtime (by parsing the `PG_VERSION` file contained there)
# - set `postgres_backup_container_image_to_use` accordingly
#
# You can leave this empty to prevent auto-detection.
# If so, the default value of `postgres_backup_container_image_to_use` is used.
postgres_backup_postgres_data_path: ''

# Specifies where the Postgres role is to be included from, for auto-detection purposes.
# This should be a path relative to your role directories.
# It gets passed to Ansible's `ansible.builtin.include_role` as a `name` parameter.
postgres_backup_postgres_role_include_name: galaxy/postgres

postgres_backup_architecture: amd64

postgres_backup_systemd_required_services_list: "{{ postgres_backup_systemd_required_services_list_default + postgres_backup_systemd_required_services_list_auto + postgres_backup_systemd_required_services_list_custom }}"
postgres_backup_systemd_required_services_list_default: "{{ [devture_systemd_docker_base_docker_service_name] if devture_systemd_docker_base_docker_service_name else [] }}"
postgres_backup_systemd_required_services_list_auto: []
postgres_backup_systemd_required_services_list_custom: []

postgres_backup_container_network: "{{ postgres_backup_identifier }}"

postgres_backup_container_additional_networks: "{{ postgres_backup_container_additional_networks_auto + postgres_backup_container_additional_networks_custom }}"
postgres_backup_container_additional_networks_auto: []
postgres_backup_container_additional_networks_custom: []

postgres_backup_container_image_registry_prefix: "docker.io/"

# postgres_backup_container_image_distro controls whether we use Alpine-based images (`-alpine`) or the normal Debian-based images.
# Alpine-based Postgres images are smaller and we usually prefer them, but they don't work on ARM32 (tested on a Raspberry Pi 3 running Raspbian 10.7).
# On ARM32, `-alpine` images fail with the following error:
# > LOG:  startup process (PID 37) was terminated by signal 11: Segmentation fault
postgres_backup_container_image_distro: "{{ 'alpine' if postgres_backup_architecture in ['amd64', 'arm64'] else 'debian' }}"

postgres_backup_container_image_v9: "{{ postgres_backup_container_image_registry_prefix }}prodrigestivill/postgres-backup-local:9.6-{{ postgres_backup_container_image_distro }}-2aa03d1"
postgres_backup_container_image_v10: "{{ postgres_backup_container_image_registry_prefix }}prodrigestivill/postgres-backup-local:10-{{ postgres_backup_container_image_distro }}-2cf00a5"
postgres_backup_container_image_v11: "{{ postgres_backup_container_image_registry_prefix }}prodrigestivill/postgres-backup-local:11-{{ postgres_backup_container_image_distro }}-2cf00a5"
postgres_backup_container_image_v12: "{{ postgres_backup_container_image_registry_prefix }}prodrigestivill/postgres-backup-local:12-{{ postgres_backup_container_image_distro }}-2cf00a5"
postgres_backup_container_image_v13: "{{ postgres_backup_container_image_registry_prefix }}prodrigestivill/postgres-backup-local:13-{{ postgres_backup_container_image_distro }}-2cf00a5"
postgres_backup_container_image_v14: "{{ postgres_backup_container_image_registry_prefix }}prodrigestivill/postgres-backup-local:14-{{ postgres_backup_container_image_distro }}-2cf00a5"
postgres_backup_container_image_v15: "{{ postgres_backup_container_image_registry_prefix }}prodrigestivill/postgres-backup-local:15-{{ postgres_backup_container_image_distro }}-2cf00a5"
postgres_backup_container_image_v16: "{{ postgres_backup_container_image_registry_prefix }}prodrigestivill/postgres-backup-local:16-{{ postgres_backup_container_image_distro }}-1a66318"
postgres_backup_container_image_v17: "{{ postgres_backup_container_image_registry_prefix }}prodrigestivill/postgres-backup-local:17-{{ postgres_backup_container_image_distro }}-234f538"
postgres_backup_container_image_latest: "{{ postgres_backup_container_image_v17 }}"

# This variable is assigned at runtime if `postgres_backup_postgres_data_path` is not empty. Overriding its value in that case has no effect.
postgres_backup_container_image_to_use: '{{ postgres_backup_container_image_latest }}'

postgres_backup_container_image_force_pull: "{{ postgres_backup_container_image_to_use.endswith(':latest') }}"
